package com.goudan.greendao.db.entity;

import java.util.List;
import com.goudan.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.goudan.greendao.db.dao.StudentDao;
import com.goudan.greendao.db.dao.StudentRelationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "STUDENT".
 */
public class Student implements java.io.Serializable {

    private Long studentId;
    private String name;
    private String studentClass;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StudentDao myDao;

    private List<StudentRelation> setStudentRelationList;

    public Student() {
    }

    public Student(Long studentId) {
        this.studentId = studentId;
    }

    public Student(Long studentId, String name, String studentClass) {
        this.studentId = studentId;
        this.name = name;
        this.studentClass = studentClass;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public Long getStudentId() {
        return studentId;
    }

    public void setStudentId(Long studentId) {
        this.studentId = studentId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStudentClass() {
        return studentClass;
    }

    public void setStudentClass(String studentClass) {
        this.studentClass = studentClass;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentRelation> getSetStudentRelationList() {
        if (setStudentRelationList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentRelationDao targetDao = daoSession.getStudentRelationDao();
            List<StudentRelation> setStudentRelationListNew = targetDao._queryStudent_SetStudentRelationList(studentId);
            synchronized (this) {
                if(setStudentRelationList == null) {
                    setStudentRelationList = setStudentRelationListNew;
                }
            }
        }
        return setStudentRelationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSetStudentRelationList() {
        setStudentRelationList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
